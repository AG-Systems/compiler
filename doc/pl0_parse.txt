program -> block "."

block -> blockloop statement
blockloop ->
    constblock blockloop |
    varblock blockloop |
    procblock blockloop |
    E

constblock -> "const" constloop
constloop -> constcomm constopt
constcomm -> constdeclaration constloop0 ";"
constopt  -> constloop | E
constloop0 ->
    "," constdeclaration constloop0 | E
constdeclaration -> ident "=" number

varblock -> "var" varloop
varloop -> varcomm varopt
varcomm -> vardeclaration varloop0 ";"
varopt -> varloop | E
varloop0 ->
    ", " vardeclaration varloop0 | E
vardeclaration -> ident

procblock -> "procedure" ident ";" block ";"

statement ->
    ident ":=" expression |
    "call" ident |
    "if" condition "then" statement |
    "begin" statements "end" |
    "while" condition "do" statement

statements -> statement ";" statements | ";" statements | E

condition -> "odd" expression | expression relop expression
relop -> "=" | "<>" | "<" | ">" | "<=" | ">="

expression ->
    "+" term termloop |
    "-" term termloop |
        term termloop
termloop ->
    "+" term termloop |
    "-" term termloop |
    E
term -> factor factorloop
factorloop ->
    "*" factor factorloop |
    "/" factor factorloop |
    E
factor -> ident | number | "(" expression ")"
